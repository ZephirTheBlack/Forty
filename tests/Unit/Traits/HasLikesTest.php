<?php

namespace Tests\Unit\Traits;

use App\Events\ModelLiked;
use App\Events\ModelUnLiked;
use App\Models\Like;
use App\Traits\HasLikes;
use App\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Broadcast;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Schema;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use function foo\func;

class HasLikesTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Schema::create('model_with_likes',function ($table){
            $table->increments('id');
        });

        Event::fake([ModelLiked::class,ModelUnLiked::class]);

    }

    /**
     * @test
     */
    public function un_modelo_tranforma_muchos_likes(){
        $model=new ModelWithLike(['id'=> 1]);

        factory(Like::class)->create(['likeable_id'=>$model->id,'likeable_type' => get_class($model)]);

        $this->assertInstanceOf(Like::class, $model->likes->first());
    }

    /**
     * @test
     */

    public function un_modelo_puede_gustar_o_no_gustar(){
        $model=ModelWithLike::create();

        $this->actingAs(factory(User::class)->create());

        $model->like();

        $this->assertEquals(1, $model->likes()->count());

        $model->unlike();

        $this->assertEquals(0, $model->likes()->count());
    }

    /**
     * @test
     */

    public function un_modelo_puede_ser_gustado_solo_una_vez(){
        $model=ModelWithLike::create();

        $this->actingAs(factory(User::class)->create());

        $model->like();

        $this->assertEquals(1, $model->likes()->count());

        $model->like();

        $this->assertEquals(1, $model->likes()->count());
    }

    /**
     * @test
     */
    public function un_modelo_sabe_si_ha_sido_gustado(){

        $model=ModelWithLike::create();

        $this->assertFalse($model->isLiked());

        $this->actingAs(factory(User::class)->create());

        $this->assertFalse($model->isLiked());

        $model->like();

        $this->assertTrue($model->isLiked());
    }

    /**
     * @test
     */
    public function un_modelo_sabe_cuantos_likes_tiene(){

        $model=new ModelWithLike(['id'=> 1]);

        $this->assertEquals(0,$model->likesCount());

        factory(Like::class, 2)->create(['likeable_id'=>$model->id,'likeable_type' => get_class($model)]);
        $this->assertEquals(2,$model->likesCount());
    }
    /**
     * @test
     */
    public function un_evento_es_disparado_cuando_se_le_ha_dado_like_a_un_modelo(){

        Event::fake([ModelLiked::class]);

        Broadcast::shouldReceive('socket')->andReturn('socket-id');
        $this->actingAs($likeSender=factory(User::class)->create());

        $model=new ModelWithLike(['id'=> 1]);

        $model->like();

        Event::assertDispatched(ModelLiked::class, function ($event) use ($likeSender) {

            $this->assertInstanceOf(ModelWithLike::class, $event->model);
            $this->assertTrue($event->likeSender->is($likeSender));
            $this->assertEventChannelName($event->model->eventChannelName(),$event);
            $this->assertEventChannelType('public',$event);
            $this->assertDontBroadcastToCurrentUser($event);

            return true;
        });
    }
    /**
     * @test
     */
    public function un_evento_es_disparado_cuando_se_le_ha_dado_unlike_a_un_modelo(){
        Event::fake([ModelUnLiked::class]);

        Broadcast::shouldReceive('socket')->andReturn('socket-id');
        $this->actingAs(factory(User::class)->create());

        $model=ModelWithLike::create();

        $model->likes()->firstOrCreate([
            'user_id'=>auth()->id()
        ]);

        $model->unlike();

        Event::assertDispatched(ModelUnLiked::class, function ($event){

            $this->assertInstanceOf(ModelWithLike::class, $event->model);
            $this->assertEventChannelName($event->model->eventChannelName(),$event);
            $this->assertEventChannelType('public',$event);
            $this->assertDontBroadcastToCurrentUser($event);

            return true;
        });
    }
    /** @test */

    public function podemos_obtener_el_nombre_del_canal_del_evento(){
        $model=new ModelWithLike(['id'=> 1]);

        $this->assertEquals(
            "modelwithlikes.1.likes",
            $model->eventChannelName()
        );
    }
}

class ModelWithLike extends Model
{
    use HasLikes;

    public $timestamps = false;

    protected $fillable = ['id'];

    public function path()
    {
        // TODO: Implement path() method.
    }
}
